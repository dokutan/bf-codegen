/*
This is a Lua module that loads the file inc2-n.csv, generated by
../constants/inc2-n.jl, and provides a Lua function to access the data.

No validation of the input data is performed and the parsing is not safely implemented to improve performance.
*/

#include <cstdint>
#include <fstream>
#include <limits>
#include <map>
#include <sstream>
#include <string>
#include <vector>

extern "C" {
#include <lauxlib.h>
#include <lua.h>

// remove all occurences of substr from str
void remove_all(std::string& str, const std::string substr)
{
    size_t pos = str.find(substr), substr_length = substr.length();
    while(pos != std::string::npos){
        str.replace(pos, substr_length, "");
        pos = str.find(substr, pos);
    }
}

// replace all occurences of substr in str with replacement
void replace_all(std::string& str, const std::string substr, const std::string replacement)
{
    size_t pos = str.find(substr), substr_length = substr.length();
    while(pos != std::string::npos){
        str.replace(pos, substr_length, replacement);
        pos = str.find(substr, pos);
    }
}

// optimize brainfuck code
int optimize(lua_State* L)
{
    std::string bf_code = std::string(luaL_tolstring(L, 1, nullptr));

    size_t length = 0;
    while(length != bf_code.length()){
        length = bf_code.length();
        remove_all(bf_code, "><");
        remove_all(bf_code, "<>");
        remove_all(bf_code, "+-");
        remove_all(bf_code, "-+");
        replace_all(bf_code, "][-]", "]");
        replace_all(bf_code, "+[-]", "[-]");
        replace_all(bf_code, "-[-]", "[-]");
        replace_all(bf_code, "[[-]]", "[-]");
    }

    lua_pushstring(L, bf_code.c_str());
    return 1;
}

// make the functions available to Lua
int luaopen_optimize(lua_State* L)
{
    luaL_Reg fns[] = { { "optimize", optimize }, { NULL, NULL } };
    luaL_newlib(L, fns);
    return 1;
}
}
