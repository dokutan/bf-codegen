/*
This is a Lua module that loads the file inc2-3.csv, generated by
../constants/inc2-3.jl, and provides a Lua function to access the data.

No validation of the input data is performed and the parsing is not safely implemented to improve performance.
*/

#define INC2_3_CSV_PATH "inc2-3.csv"

#include <array>
#include <cstdint>
#include <fstream>
#include <string>

// read a uint8_t from in starting at i
uint8_t unsafe_stou_getline(int& i, const std::string& in)
{
    uint8_t result = 0;

    do {
        result = (result * 10) + (in[i] - '0');
        i++;
    } while (in[i] != ',');
    i++;

    return result;
}

// read an int8_t from in starting at i
int8_t unsafe_stoi_getline(int& i, const std::string& in)
{
    int8_t result = 0;
    bool is_negative = false;

    if (in[i] == '-') {
        is_negative = true;
        i++;
    }

    do {
        result = (result * 10) + (in[i] - '0');
        i++;
    } while (in[i] != ',');
    i++;

    return is_negative ? -result : result;
}

extern "C" {
#include <lauxlib.h>
#include <lua.h>

bool is_loaded = false;
std::array<std::array<std::array<std::array<int8_t, 8>, 256>, 256>, 256> inc2_3_factors;

// load inc2-3.csv into inc2_3_factors
int load(lua_State* L)
{
    if(is_loaded){
        return 0;
    }

    std::ifstream csv_file(INC2_3_CSV_PATH);
    std::string line;

    if (csv_file.fail()) {
        return luaL_error(L, "failed to open " INC2_3_CSV_PATH);
    }

    while (std::getline(csv_file, line)) {
        int i = 0;
        line += ',';

        uint8_t r1 = unsafe_stou_getline(i, line);
        uint8_t r2 = unsafe_stou_getline(i, line);
        uint8_t r3 = unsafe_stou_getline(i, line);

        int8_t i1 = unsafe_stoi_getline(i, line);
        int8_t i2 = unsafe_stoi_getline(i, line);
        int8_t i3 = unsafe_stoi_getline(i, line);
        int8_t il = unsafe_stoi_getline(i, line);
        int8_t a1 = unsafe_stoi_getline(i, line);
        int8_t a2 = unsafe_stoi_getline(i, line);
        int8_t a3 = unsafe_stoi_getline(i, line);
        int8_t al = unsafe_stoi_getline(i, line);

        inc2_3_factors[r1][r2][r3][0] = i1;
        inc2_3_factors[r1][r2][r3][1] = i2;
        inc2_3_factors[r1][r2][r3][2] = i3;
        inc2_3_factors[r1][r2][r3][3] = il;
        inc2_3_factors[r1][r2][r3][4] = a1;
        inc2_3_factors[r1][r2][r3][5] = a2;
        inc2_3_factors[r1][r2][r3][6] = a3;
        inc2_3_factors[r1][r2][r3][7] = al;
    }

    csv_file.close();
    is_loaded = true;
    return 0;
}

// get values from inc2_3_factors
int get(lua_State* L)
{
    uint8_t r1 = lua_tointeger(L, 1);
    uint8_t r2 = lua_tointeger(L, 2);
    uint8_t r3 = lua_tointeger(L, 3);

    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][0]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][1]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][2]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][3]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][4]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][5]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][6]);
    lua_pushinteger(L, inc2_3_factors[r1][r2][r3][7]);

    return 8;
}

// make the functions available to Lua
int luaopen_inc2_3_factors(lua_State* L)
{
    luaL_Reg fns[] = { { "load", load }, { "get", get }, { NULL, NULL } };
    luaL_newlib(L, fns);
    // luaL_register(L, "inc2_3_factors", fns);
    return 1;
}
}
